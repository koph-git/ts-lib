/**
 * debounce.ts
 * @version 1.0.0
 * @author Koph <kophmail@gmail.com>
 *
 * Fun√ß√£o utilit√°ria para debouncing de fun√ß√µes
 * Esta fun√ß√£o `debounce` √© um utilit√°rio que impede que uma fun√ß√£o seja chamada
 * repetidamente em um curto per√≠odo de tempo. Em vez disso, a execu√ß√£o da fun√ß√£o
 * √© adiada at√© que o tempo especificado (`delay`) tenha se passado desde a √∫ltima chamada.
 *
 * O mecanismo de "debounce" √© √∫til para evitar execu√ß√µes excessivas de fun√ß√µes em eventos
 * como entrada de texto em um campo de busca, redimensionamento de janela, rolagem de p√°gina
 * e outras intera√ß√µes de usu√°rio que podem disparar eventos rapidamente.
 *
 * ----------------------------------------------------------
 * üìå Defini√ß√µes de Tipos:
 *
 * - `DebounceFunction<T>`:
 *   - Tipo utilit√°rio que define a assinatura da fun√ß√£o debounced.
 *   - Mant√©m os mesmos par√¢metros da fun√ß√£o original (`T`), mas retorna `void`,
 *     pois a execu√ß√£o √© adiada e n√£o retorna um valor imediatamente.
 *
 * ----------------------------------------------------------
 * üìå Fun√ß√£o `debounce<T>(func: T, delay: number): DebounceFunction<T>`
 *
 * **Par√¢metros:**
 *   - `func`: A fun√ß√£o original que ser√° "debounced".
 *   - `delay`: Tempo de espera (em milissegundos) antes de chamar a fun√ß√£o `func`
 *              ap√≥s a √∫ltima execu√ß√£o.
 *
 * **Retorno:**
 *   - Retorna uma nova fun√ß√£o que pode ser chamada normalmente, mas sua execu√ß√£o
 *     ser√° atrasada pelo tempo especificado em `delay`.
 *   - Se `delay` for `0`, a fun√ß√£o original ser√° retornada sem modifica√ß√µes.
 *
 * ----------------------------------------------------------
 * üìå Como funciona?
 *   - Cada vez que a fun√ß√£o debounced √© chamada, o temporizador anterior √© cancelado
 *     (`clearTimeout`) e um novo temporizador (`setTimeout`) √© criado.
 *   - A fun√ß√£o original s√≥ ser√° executada quando o usu√°rio parar de chamar a fun√ß√£o
 *     por pelo menos `delay` milissegundos.
 *
 * ----------------------------------------------------------
 * üìå Exemplo de Uso:
 *
 * ```ts
 * // Fun√ß√£o que ser√° chamada ap√≥s um tempo de espera
 * function logMessage(message: string) {
 *   console.log("Mensagem:", message);
 * }
 *
 * // Criando uma vers√£o debounced da fun√ß√£o, com 500ms de espera
 * const debouncedLog = debounce(logMessage, 500);
 *
 * // Chamadas consecutivas dentro de 500ms resetar√£o o timer
 * debouncedLog("Ol√°");
 * debouncedLog("Mundo");
 * debouncedLog("Debounce");
 *
 * // Apenas "Debounce" ser√° impresso no console ap√≥s 500ms sem novas chamadas.
 * ```
 *
 * ----------------------------------------------------------
 * üìå Aplica√ß√µes Comuns:
 *   - Evitar chamadas excessivas em eventos de input (ex.: autocomplete).
 *   - Melhorar a performance ao lidar com eventos de rolagem e redimensionamento de tela.
 *   - Controlar chamadas de API frequentes em aplica√ß√µes web din√¢micas.
 *
 * ----------------------------------------------------------
 * üìå Notas Importantes:
 *   - A fun√ß√£o debounced **n√£o retorna um valor**, pois a execu√ß√£o √© ass√≠ncrona.
 *   - Se o `delay` for `0`, a fun√ß√£o original √© retornada sem altera√ß√£o, garantindo efici√™ncia.
 *   - Para garantir que o √∫ltimo evento seja sempre executado, pode ser necess√°rio
 *     armazenar manualmente um timeout e chamar a fun√ß√£o no final de um evento espec√≠fico.
 *
 * ----------------------------------------------------------
 * üöÄ Desenvolvido para otimizar eventos e melhorar a performance em aplica√ß√µes web!
 */

type DebounceFunction<T extends (...args: any[]) => any> = (
  ...args: Parameters<T>
) => void;

export function debounce<T extends (...args: any[]) => any>(func: T, delay: number = 10): DebounceFunction<T> {
  let timeoutId: ReturnType<typeof setTimeout> | null = null;

  if (delay == 0) {
    return func
  }

  return (...args: Parameters<T>): void => {
    if (timeoutId) {
      clearTimeout(timeoutId);
    }

    timeoutId = setTimeout(() => {
      func(...args);
    }, delay);
  };
}
